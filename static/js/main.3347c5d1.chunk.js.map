{"version":3,"sources":["components/Map.js","components/PlaceItem.js","components/Places.js","components/Sidebar.js","PlacesAPI.js","App.js","serviceWorker.js","index.js"],"names":["MyMapComponent","compose","withScriptjs","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","defaultCenter","lat","lng","places","map","place","position","venue","location","isSelected","window","animation","google","maps","Animation","BOUNCE","key","id","title","name","onClick","EventBus","dispatch","onCloseClick","aria-label","formattedAddress","photo","src","prefix","suffix","alt","Map","googleMapURL","concat","loadingElement","style","height","containerElement","width","mapElement","this","Component","PlaceItem","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","onPlaceSelected","bind","assertThisInitialized","className","Places","PlaceItem_PlaceItem","onClickHandler","Sidebar","updateQuery","e","query","target","value","type","placeholder","autoFocus","onChange","Places_Places","getPlaces","axios","get","URLSearchParams","client_id","client_secret","categoryId","near","radius","v","then","response","results","data","group","regexp","RegExp","filter","match","catch","error","console","log","selectedPlace","App","_this2","PlacesAPI","setState","addEventListener","onQueryChange","_this3","Sidebar_Sidebar","Map_Map","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","fetch","contentType","headers","status","indexOf","ready","unregister","reload","alert","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3347c5d1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { compose } from 'recompose';\nimport EventBus from 'eventbusjs';\n\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n    InfoWindow\n} from \"react-google-maps\";\n\nconst MyMapComponent = compose(\n    withScriptjs,\n    withGoogleMap\n)(props =>\n    <GoogleMap\n        defaultZoom={10}\n        defaultCenter={{ lat: 41.8506, lng: -87.7937 }}\n    >\n        {\n            props.places.map(place => {\n                let position = {\n                    lat: place.venue.location.lat,\n                    lng: place.venue.location.lng\n                }\n\n                let isSelected = window.isSelected(place)\n                let animation = isSelected ? window.google.maps.Animation.BOUNCE : null\n\n                function onClickHandler() {\n                    EventBus.dispatch(\"PLACE_SELECTED\", place)\n                }\n\n                function onCloseClickHandler() {\n                    EventBus.dispatch(\"PLACE_SELECTED\", null)\n                }\n\n                return (\n                    <Marker\n                        key = {place.id}\n                        position = {position}\n                        title = {place.venue.name}\n                        animation = {animation}\n                        onClick = {onClickHandler}\n                    >\n                    {\n                        isSelected &&\n                            <InfoWindow onCloseClick = {onCloseClickHandler}>\n                                <div aria-label={\"Description of \" + place.venue.name}>\n                                    <h3>{place.venue.name}</h3>\n                                    <address>\n                                    {place.venue.location.formattedAddress[0]}\n                                    {place.venue.location.formattedAddress[1]}\n                                    {place.venue.location.formattedAddress[2]}\n                                    </address>\n                                    {\n                                        place.photo && <img src={place.photo.prefix + '200x200' + place.photo.suffix} alt={place.venue.name} title={place.venue.name} />\n                                    }\n                                </div>\n                            </InfoWindow>\n                    }\n                    </Marker>\n                )\n          })\n        }\n    </GoogleMap>\n)\n\n\n\nexport default class Map extends Component {\n    render() {\n        const apiKey = 'AIzaSyAtcWBXNw50hUEw4K6wD5ZuV9JTUGduDoI'\n        const googleMapURL = `https://maps.googleapis.com/maps/api/js?v=3.exp&key=${apiKey}`\n\n        return (\n            <MyMapComponent\n                googleMapURL={googleMapURL}\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElement={<div style={{ height: `100%`, width: '70%' }} />}\n                mapElement={<div style={{ height: `100%` }} />}\n                places={this.props.places}\n            />\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport EventBus from 'eventbusjs';\n\nexport default class PlaceItem extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isSelected: window.isSelected(props.place)\n        }\n\n        this.onPlaceSelected = this.onPlaceSelected.bind(this)\n    }\n\n    onPlaceSelected() {\n        EventBus.dispatch(\"PLACE_SELECTED\", this.props.place);\n    }\n\n    render() {\n        const name = this.props.place.venue.name;\n\n        return (\n            <div\n                className={this.state.isSelected ? 'place selected' : 'place'}\n                onClick={this.onPlaceSelected}\n                aria-label={\"Learn more about \" + name}\n            >\n                {name}\n            </div>\n\n\n        )\n    }\n}\n","import React, {Component} from \"react\";\nimport PlaceItem from '../components/PlaceItem';\n\n\nexport default class Places extends Component {\n    render() {\n        return (\n            <ul className=\"places\">\n            {\n                this.props.places.map(place => (\n                    <li className=\"placeitem\" key={place.id}>\n                        <PlaceItem\n                            place = {place}\n                            onClickHandler = {this.props.onClickHandler}\n                        />\n                    </li>\n                ))\n            }\n            </ul>\n        )\n    }\n}\n","import React, {Component} from \"react\";\nimport Places from '../components/Places';\nimport EventBus from 'eventbusjs';\n\nexport default class Sidebar extends Component {\n    updateQuery = (e) => {\n        let query = e.target.value\n        EventBus.dispatch('QUERY_CHANGED', query)\n    }\n\n    render() {\n        return (\n            <div className=\"sidebar\">\n                <h3>Search Foursquare</h3>\n                <input\n                    type=\"text\"\n                    id=\"searchbox\"\n                    placeholder=\"Type Here\"\n                    autoFocus value={window.query || ''}\n                    onChange={this.updateQuery}\n                    aria-label=\"Search Box\"\n                />\n                <Places places={this.props.places} />\n            </div>\n        )\n    }\n}\n","import axios from 'axios';\n\nexport const getPlaces = (query) => {\n    const searchEndpoint = \"https://api.foursquare.com/v2/search/recommendations?\"\n\n    const parameters = {\n        client_id: \"1PDW4N4XLZ2QQTATI55V00VDZRQNTHE40XZHI0BMJOXJOJW5\",\n        client_secret: \"5BHER5Y5T4FBN25S0SPJIABVKZLINOYEPLVVD0QSEXEL0DWG\",\n        categoryId: \"52f2ae52bcbc57f1066b8b81\",\n        near: \"Berwyn\",\n        radius: \"100000\",\n        v: \"20182212\",\n    }\n\n    return axios.get(searchEndpoint + new URLSearchParams(parameters))\n                .then(response => {\n                    let results = response.data.response.group.results\n\n                    if (query) {\n                        let regexp = new RegExp(query, 'i')\n\n                        results = results.filter(place => {\n                            if (place.venue.name.match(regexp)) {\n                                return place\n                            }\n                            return null\n                        })\n                    }\n\n                    return results\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Map from './components/Map';\nimport Sidebar from './components/Sidebar';\nimport * as PlacesAPI from './PlacesAPI'\nimport EventBus from 'eventbusjs';\n\nwindow.selectedPlace = null;\n\nwindow.isSelected = function(place) {\n    return window.selectedPlace && place && (window.selectedPlace.id === place.id)\n}\n\nwindow.query = null;\n\nexport default class App extends Component {\n    state = {\n        places: [],\n        selectedPlace: null,\n        query: null\n    }\n\n    componentDidMount() {\n        PlacesAPI.getPlaces().then(places => {\n            this.setState({places: places})\n        })\n\n        this.onPlaceSelected = this.onPlaceSelected.bind(this)\n        EventBus.addEventListener('PLACE_SELECTED', this.onPlaceSelected)\n\n        this.onQueryChange = this.onQueryChange.bind(this)\n        EventBus.addEventListener('QUERY_CHANGED', this.onQueryChange)\n    }\n\n    onPlaceSelected(e) {\n        let place = e.target\n\n        window.selectedPlace = place\n\n        // Set state to force a re-reneder of the App\n        this.setState({ selectedPlace: place })\n    }\n\n    onQueryChange(e) {\n        let query = e.target\n\n        window.query = query\n\n        PlacesAPI.getPlaces(query).then(places => {\n            this.setState({\n                query: query,\n                places: places\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Sidebar places = {this.state.places} />\n                <Map places = {this.state.places} />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n\n            if (installingWorker == null) {\n                return;\n            }\n\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            'New content is available and will be used when all ' +\n                            'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                        );\n\n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log('Content is cached for offline use.');\n\n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    })\n    .catch(error => {\n        console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                    (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n            alert('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}